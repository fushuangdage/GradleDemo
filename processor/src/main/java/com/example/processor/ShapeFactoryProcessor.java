package com.example.processor;

import com.example.annotation.InjectFactory;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.PackageElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

/**
 * Author: fushuang
 * Date: 2020/4/30 下午5:54
 * Description:
 * Wiki:
 * History:
 * <author> <time> <version> <desc>
 * </desc></version></time></author>
 */
//@AutoService(Processor.class)
public class ShapeFactoryProcessor extends AbstractProcessor {

    private Messager messager;
    private Filer filer;
    public HashMap<String, SameFactoryCollection> superClassTypes = new HashMap<String, SameFactoryCollection>();
    private Elements elementUtils;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        messager = processingEnvironment.getMessager();
        filer = processingEnvironment.getFiler();
        messager.printMessage(Diagnostic.Kind.NOTE, "enter init.....");
        elementUtils = processingEnvironment.getElementUtils();
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        messager.printMessage(Diagnostic.Kind.NOTE, "enter getSupportedSourceVersion.....");
        return SourceVersion.latestSupported();
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        messager.printMessage(Diagnostic.Kind.NOTE, "enter getSupportedAnnotationTypes.....");

        LinkedHashSet<String> set = new LinkedHashSet<>();
        set.add(InjectFactory.class.getCanonicalName());
        return set;
    }

    /**
     * 建议使用JavaPoem
     *
     * @param set
     * @param roundEnvironment
     * @return
     */
//    @Override
//    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
//        messager.printMessage(Diagnostic.Kind.NOTE, "enter process.....");
//        String s;
//        for (TypeElement typeElement : set) {
//            if ((s = typeElement.getQualifiedName().toString()).equals(InjectFactory.class.getCanonicalName())) {
//                MethodSpec main = MethodSpec.methodBuilder("main")
//                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
//                        .returns(void.class)
//                        .addParameter(String[].class, "arges")
//                        .addStatement("$T.out.println($S)", System.class, "Hello apt")
//                        .build();
//
//                TypeSpec aptTest = TypeSpec.classBuilder("AptTest")
//                        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
//                        .addMethod(main)
//                        .build();
//
//                JavaFile file = JavaFile.builder("com.example", aptTest)
//                        .addFileComment("this file is generated by apt").build();
//
//                try {
//                    file.writeTo(filer);
//                } catch (IOException e) {
//                    messager.printMessage(Diagnostic.Kind.NOTE,"IOException while apt");
//                    e.printStackTrace();
//                }
//            }
//            messager.printMessage(Diagnostic.Kind.NOTE, "enter process.....  " + s);
//
//        }
//        return true;
//    }
    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        Set<? extends Element> elementsAnnotatedWith = roundEnvironment.getElementsAnnotatedWith(InjectFactory.class);
        superClassTypes.clear();
        for (Element element : elementsAnnotatedWith) {
            if (element.getKind() != ElementKind.CLASS) {
                try {
                    throw new Exception(element.toString() + " only can be annotated on class ");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            TypeElement typeElement = (TypeElement) element;
            messager.printMessage(Diagnostic.Kind.NOTE,"process tag ...............");
            FactoryAnnotatedClass factoryAnnotatedClass = new FactoryAnnotatedClass(messager,typeElement);

            messager.printMessage(Diagnostic.Kind.NOTE,"process tag ...............1");

            SameFactoryCollection factoryGrouped = superClassTypes.get(factoryAnnotatedClass.qualifiedSuperClassName);
            if (factoryGrouped == null) {
                 factoryGrouped = new SameFactoryCollection(factoryAnnotatedClass.qualifiedSuperClassName);
                superClassTypes.put(factoryAnnotatedClass.qualifiedSuperClassName,factoryGrouped);
            }
            factoryGrouped.addAnnotationClass(factoryAnnotatedClass);
        }
        for (SameFactoryCollection value : superClassTypes.values()) {
            generateCode(value);
        }

        return true;
    }

    public void generateCode(SameFactoryCollection annotatedClass) {
        MethodSpec.Builder method = MethodSpec.methodBuilder("create")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(String.class, "id")
                .returns(TypeName.get(elementUtils.getTypeElement(annotatedClass.qualifiedSuperClassName).asType()));

        // check if id is null
        method.beginControlFlow("if (id == null)")
                .addStatement("throw new IllegalArgumentException($S)", "id is null!")
                .endControlFlow();

        for (FactoryAnnotatedClass factoryAnnotatedClass : annotatedClass.set) {
            method.beginControlFlow("if ($S.equals(id))",factoryAnnotatedClass.id)
                    .addStatement("return new $L()",factoryAnnotatedClass.classElement.getQualifiedName().toString())
                    .endControlFlow();

        }
        method.addStatement("throw new IllegalArgumentException($S + id)", "Unknown id = ");

        TypeElement superClass = elementUtils.getTypeElement(annotatedClass.qualifiedSuperClassName);
        TypeSpec typeSpec = TypeSpec.classBuilder(superClass.getSimpleName() + "Factory")
                .addModifiers(Modifier.PUBLIC)
                .addMethod(method.build())
                .build();


        TypeElement typeElement = elementUtils.getTypeElement(annotatedClass.qualifiedSuperClassName);

        PackageElement pkg = elementUtils.getPackageOf(typeElement);
        String packageName = pkg.isUnnamed() ? null : pkg.getQualifiedName().toString();

        try {
            JavaFile.builder(packageName,typeSpec).build().writeTo(filer);

        } catch (IOException e) {
            e.printStackTrace();
        }


    }
}