import com.gradle.plugin.MyBuildScripPlugin
apply from:'delegate.gradle'
apply plugin: 'com.android.application'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: BuildScripPlugin
apply plugin: MyBuildScripPlugin
apply plugin: 'com.fs.plugin.MyBuildScripPluginTwo'
apply plugin: 'com.fs.plugin.TransformPlugin'
apply plugin: 'com.fs.plugin.SpiPlugin'
customArgs.extensionArgs = "外部修改参数"

group = 'com.github.fushuang'

println(" ${project.getName()} parent is ${getParent().name}")

android {
    println("---- android block -----")
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.gavin.apttest"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation project(':annotation')
    println(" annotationProcessor processor")
    annotationProcessor project(':processor')
}
task("myTestPrint", {
    println("myTestPrint log")
    doLast { println("myTestPrint doLast") }
    doFirst { println("myTestPrint doFirst") }
})

class BuildScripPlugin implements Plugin<Project> {

    @Override
    void apply(Project target) {
        target.task "hello", {
            println("BuildScripPlugin log")
            doLast {
                println("hello : BuildScripPlugin doLast : step  1")
            }
            doLast {
                println("hello : BuildScripPlugin doLast : step  2")
            }

            doLast {
                outputs.getFiles().forEach { file ->
                    println("hello : file ${file.absolutePath} / $file.name")
                }
            }
        }
    }
}

def startBuildTime, endBuildTime
afterEvaluate {
    def myTask = tasks.getByName('hello')
    myTask.doFirst {
        startBuildTime = System.currentTimeMillis()
        println(" doFirst run on time $startBuildTime")
    }
    myTask.doLast {
        endBuildTime = System.currentTimeMillis()
        println(" doLast run on time $endBuildTime")
        println(" Current project execute time is ${endBuildTime - startBuildTime}")
    }
    myTask.dependsOn("myTestPrint", "myBuildTask")
}